import Discretion.Poset2.Elgot
import Discretion.Premonoidal.BraidedHelpers

import Refinery.Signature

namespace Refinery

open CategoryTheory

open Monoidal

open PremonoidalCategory MonoidalCategory'
open scoped MonoidalCategory

open ChosenFiniteCoproducts

class TyModel
  (Œ± : Type _) [HasQuant Œ±]
  (C : Type _) [Category C] [MonoidalCategoryStruct C] [ChosenFiniteCoproducts C]
  where
  den_base : Œ± ‚Üí C

open TyModel

section TyModel

variable {Œ± : Type _} [HasQuant Œ±]
         {C : Type _} [Category C] [MonoidalCategoryStruct C] [ChosenFiniteCoproducts C]
        [TyModel Œ± C]

@[simp]
def Ty.den : Ty Œ± ‚Üí C
  | .of A => TyModel.den_base A
  | .unit => ùüô_ C
  | .tensor A B => den A ‚äó den B
  | .empty => ùüò_ C
  | .coprod A B => den A ‚äï‚Çí den B

notation "t‚ü¶" A "‚üß" => Ty.den A

end TyModel

class VarModel
  (Œ± : Type _) [HasQuant Œ±]
  (C : Type _) [Category C] [MC : MonoidalCategoryStruct C] [ChosenFiniteCoproducts C]
  extends TyModel Œ± C where
  drop (A : Ty Œ±) [hA : IsAff A] : t‚ü¶ A ‚üß ‚ü∂ ùüô_ C
  copy (A : Ty Œ±) [hA : IsRel A] : (t‚ü¶ A ‚üß : C) ‚ü∂ t‚ü¶ A ‚üß ‚äó t‚ü¶ A ‚üß

notation "!_" => VarModel.drop

notation "Œî_" => VarModel.copy

class SigModel
  (œÜ : Type _) (Œ± : Type _) (Œµ : Type _) [S : Signature œÜ Œ± Œµ]
  (C : Type _) [Category C] [Category C] [PremonoidalCategory C] [ChosenFiniteCoproducts C]
               [BraidedCategory' C] [E : Effectful2 C Œµ]
  extends VarModel Œ± C
  where
  den_inst (f : œÜ) : (t‚ü¶S.src f‚üß : C) ‚ü∂ t‚ü¶S.trg f‚üß
  den_eff (f : œÜ) : E.eff (S.eff f) (den_inst f)

notation "i‚ü¶" f "‚üß" => SigModel.den_inst f


variable {œÜ : Type _} {Œ± : Type _} {Œµ : Type _} [S : Signature œÜ Œ± Œµ]
         {C : Type _} [Category C] [PremonoidalCategory C] [ChosenFiniteCoproducts C]
        [BraidedCategory' C]

def Signature.FnTy.den [Effectful2 C Œµ] [SigModel œÜ Œ± Œµ C]
  {f : œÜ} {A B : Ty Œ±} (h : FnTy f A B)
  : (t‚ü¶ A ‚üß : C) ‚ü∂ t‚ü¶ B ‚üß := eqToHom (by rw [h.src]) ‚â´ i‚ü¶ f ‚üß ‚â´ eqToHom (by rw [h.trg])

instance Signature.FnEff.instHasEff [E : Effectful2 C Œµ] [S : SigModel œÜ Œ± Œµ C]
  {f : œÜ} {e : Œµ} [h : FnEff e f] : E.HasEff e (S.den_inst f)
  := (EffectfulCategory.HasEff.mk (S.den_eff f)).mono h.eff

instance Signature.IsFn.instHasEff [E : Effectful2 C Œµ] [SigModel œÜ Œ± Œµ C]
  {f : œÜ} {A B : Ty Œ±} [h : IsFn f e A B] : E.HasEff e h.den
  := by unfold FnTy.den; infer_instance

class Model
  (œÜ : Type _) (Œ± : outParam (Type _)) (Œµ : outParam (Type _)) [S : Signature œÜ Œ± Œµ]
  (C : Type _) [Category C] [PremonoidalCategory C] [ChosenFiniteCoproducts C]
               [BraidedCategory' C] [Iterate C] [E : Elgot2 C Œµ]
  extends SigModel œÜ Œ± Œµ C where
  copy_swap {A : Ty Œ±} [hA : IsRel A] : Œî_ A ‚â´ (Œ≤'_ _ _).hom = copy A
  copy_assoc {A : Ty Œ±} [hA : IsRel A] :
    Œî_ A ‚â´ Œî_ A ‚ñ∑ (t‚ü¶ A ‚üß : C) ‚â´ (Œ±_ _ _ _).hom = Œî_ A ‚â´ t‚ü¶ A ‚üß ‚óÅ Œî_ A
  drop_pure {A} [hA : IsAff A] : E.eff ‚ä• (drop A)
  copy_pure {A} [hA : IsRel A] : E.eff ‚ä• (copy A)
  drop_unit : drop .unit = ùüô (ùüô_ C)
  drop_tensor {A B} [hA : IsAff A] [hB : IsAff B]
    : drop (.tensor A B) = (drop A ‚äó drop B) ‚â´ (Œª_ _).hom
  copy_unit : copy .unit = (Œª_ _).inv
  copy_tensor {A B} [hA : IsRel A] [hB : IsRel B]
    : copy (.tensor A B) = (copy A ‚äó copy B) ‚â´ (Œ≤i_ _ _ _ _).hom
  drop_rem {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsAff A] [IsAff B] [hf : IsRem e] : f ‚â´ drop _ ‚Ü† drop _
  copy_drop_left_rem {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsRel A] [IsAff B] [hf : IsRem e] : copy _ ‚â´ (f ‚â´ drop _) ‚ñ∑ t‚ü¶ A ‚üß ‚Ü† (Œª_ _).inv
  copy_dup_ltimes {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsRel A] [IsRel B] [hf : IsDup e] : f ‚â´ copy _ ‚Ü† copy _ ‚â´ (f ‚ãâ f)
  copy_dup_rtimes {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsRel A] [IsRel B] [hf : IsDup e] : f ‚â´ copy _ ‚Ü† copy _ ‚â´ (f ‚ãä f)
  drop_add {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsAff A] [IsAff B] [hf : IsAdd e] : f ‚â´ drop _ ‚Üû drop _
  copy_drop_left_add {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsRel A] [IsAff B] [hf : IsAdd e] : copy _ ‚â´ (f ‚â´ drop _) ‚ñ∑ t‚ü¶ A ‚üß ‚Üû (Œª_ _).inv
  copy_fuse_ltimes {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsRel A] [IsRel B] [hf : IsFuse e] : f ‚â´ copy _ ‚Üû copy _ ‚â´ (f ‚ãâ f)
  copy_fuse_rtimes {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [IsRel A] [IsRel B] [hf : IsFuse e] : f ‚â´ copy _ ‚Üû copy _ ‚â´ (f ‚ãä f)

attribute [simp] Model.drop_unit Model.copy_unit

attribute [reassoc] Model.copy_swap Model.copy_assoc Model.drop_tensor Model.copy_tensor

variable [Iterate C] [E : Elgot2 C Œµ] [M : Model œÜ Œ± Œµ C]

@[reassoc]
theorem Model.drop_aff {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsAff A] [hB : IsAff B] [hf : IsAff e] : f ‚â´ !_ _ = !_ _
    := refines_antisymm (drop_rem e f) (drop_add e f)

@[reassoc]
theorem Model.copy_drop_left_aff {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsRel A] [hB : IsAff B] [hf : IsAff e] : Œî_ _ ‚â´ (f ‚â´ !_ _) ‚ñ∑ t‚ü¶ A ‚üß = (Œª_ _).inv
    := refines_antisymm (copy_drop_left_rem e f) (copy_drop_left_add e f)

@[reassoc]
theorem Model.copy_drop_left_aff' {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsRel A] [hB : IsAff B] [hf : IsAff e] : Œî_ _ ‚â´ f ‚ñ∑ t‚ü¶ A ‚üß ‚â´ !_ B ‚ñ∑ t‚ü¶ A ‚üß = (Œª_ _).inv
    := by rw [<-MonoidalCategory'.comp_whiskerRight, M.copy_drop_left_aff e f]

@[reassoc]
theorem Model.copy_drop_right_aff {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsRel A] [hB : IsAff B] [hf : IsAff e] : Œî_ _ ‚â´ t‚ü¶ A ‚üß ‚óÅ (f ‚â´ !_ _) = (œÅ_ _).inv
    := by
    rw [<-cancel_mono (f := (Œ≤'_ _ _).hom)]
    simp only [
      PremonoidalCategory.whiskerLeft_comp, Category.assoc,
      BraidedCategory'.braiding_naturality_right, BraidedCategory'.braiding_naturality_right_assoc
    ]
    rw [M.copy_swap_assoc, M.copy_drop_left_aff' e f]
    simp

@[reassoc]
theorem Model.copy_drop_right_aff' {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsRel A] [hB : IsAff B] [hf : IsAff e]
    : Œî_ _ ‚â´ t‚ü¶ A ‚üß ‚óÅ f ‚â´ t‚ü¶ A ‚üß ‚óÅ !_ B = (œÅ_ _).inv
    := by rw [<-MonoidalCategory'.whiskerLeft_comp, M.copy_drop_right_aff e f]

@[reassoc]
theorem Model.copy_rel_ltimes {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsRel A] [hB : IsRel B] [hf : IsRel e] : f ‚â´ Œî_ _ = Œî_ _ ‚â´ (f ‚ãâ f)
    := refines_antisymm (copy_dup_ltimes e f) (copy_fuse_ltimes e f)

@[reassoc]
theorem Model.copy_rel_rtimes {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsRel A] [hB : IsRel B] [hf : IsRel e] : f ‚â´ Œî_ _ = Œî_ _ ‚â´ (f ‚ãä f)
    := refines_antisymm (copy_dup_rtimes e f) (copy_fuse_rtimes e f)

@[reassoc]
theorem Model.copy_rel_tensor {A B : Ty Œ±} (e : Œµ) (f : t‚ü¶ A ‚üß ‚ü∂ t‚ü¶ B ‚üß) [h : E.HasEff e f]
    [hA : IsRel A] [hB : IsRel B] [hf : IsRel e] : f ‚â´ Œî_ _ = Œî_ _ ‚â´ (f ‚äó f)
    := by rw [copy_rel_ltimes e, tensorHom_def]

instance Model.dropCentral {A : Ty Œ±} [IsAff A] : Central (C := C) (!_ A)
  := E.pure_hom_central drop_pure

instance Model.copyCentral {A : Ty Œ±} [IsRel A] : Central (C := C) (Œî_ A)
  := E.pure_hom_central copy_pure

instance Model.drop_eff {e : Œµ} {A : Ty Œ±} [IsAff A] : E.HasEff e (!_ A) where
  has_eff := E.eff.monotone' bot_le _ M.drop_pure

instance Model.copy_eff {e : Œµ} {A : Ty Œ±} [IsRel A] : E.HasEff e (Œî_ A) where
  has_eff := E.eff.monotone' bot_le _ M.copy_pure

@[reassoc]
theorem Model.copy_drop_both {A : Ty Œ±}
    [hA : IsRel A] [hA' : IsAff A] : Œî_ A ‚â´ (M.drop A ‚äó M.drop A) = M.drop A ‚â´ (Œª_ _).inv
    := by rw [<-copy_rel_tensor (A := A) (B := Ty.unit) ‚ä• (f := M.drop A), copy_unit]; rfl

@[reassoc]
theorem Model.copy_drop_both_leftUnitor
    [hA : IsRel A] [hA' : IsAff A] : Œî_ A ‚â´ (M.drop A ‚äó M.drop A) ‚â´ (Œª_ _).hom = M.drop A
    := by rw [copy_drop_both_assoc]; simp

@[reassoc]
theorem Model.copy_drop_both_rightUnitor
    [hA : IsRel A] [hA' : IsAff A] : Œî_ A ‚â´ (M.drop A ‚äó M.drop A) ‚â´ (œÅ_ _).hom = M.drop A
    := by rw [copy_drop_both_assoc]; simp [MonoidalCategory'.unitors_inv_equal]

@[reassoc]
theorem Model.drop_copy {A : Ty Œ±}
    [hA : IsRel A] [hA' : IsAff A] : !_ A ‚â´ M.copy Ty.unit = Œî_ A ‚â´ (M.drop A ‚äó M.drop A)
    := by rw [copy_unit, copy_drop_both]; rfl

@[reassoc]
theorem Model.copy_drop_left {A : Ty Œ±}
    [hA : IsRel A] [hA' : IsAff A] : Œî_ A ‚â´ (M.drop A ‚ñ∑ t‚ü¶ A ‚üß) = (Œª_ _).inv
    := by convert copy_drop_left_aff (hA := hA) (hB := hA') ‚ä• (ùüô _) using 1; simp

@[reassoc]
theorem Model.copy_drop_right {A : Ty Œ±}
    [hA : IsRel A] [hA' : IsAff A] : Œî_ A ‚â´ (t‚ü¶ A ‚üß ‚óÅ M.drop A) = (œÅ_ _).inv
    := by convert copy_drop_right_aff (hA := hA) (hB := hA') ‚ä• (ùüô _) using 1; simp

@[reassoc]
theorem Model.copy_drop_tensor_left {A : Ty Œ±} {X : C} (f : t‚ü¶A‚üß ‚ü∂ X)
    [hA : IsRel A] [hA' : IsAff A] : Œî_ A ‚â´ (!_ A ‚äó f) = f ‚â´ (Œª_ _).inv
    := by rw [tensorHom_def, copy_drop_left_assoc, leftUnitor_inv_naturality]

@[reassoc]
theorem Model.copy_drop_tensor_right {A : Ty Œ±} {X : C} (f : t‚ü¶A‚üß ‚ü∂ X)
    [hA : IsRel A] [hA' : IsAff A] : Œî_ A ‚â´ (f ‚äó !_ A) = f ‚â´ (œÅ_ _).inv
    := by rw [tensorHom_def_of_right, copy_drop_right_assoc, rightUnitor_inv_naturality]
