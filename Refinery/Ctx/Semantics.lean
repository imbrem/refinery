import Refinery.Model
import Refinery.Ctx.Basic

import Discretion.Utils.Category

namespace Refinery

open CategoryTheory

open MonoidalCategory

open Monoidal

open EffectfulCategory

section TyModel

variable {Œ± : Type _} [HasQuant Œ±]
         {C : Type _} [Category C] [MonoidalCategoryStruct C] [ChosenFiniteCoproducts C]
         [TyModel Œ± C]

notation "v‚ü¶" v "‚üß" => t‚ü¶ Var?.ety v ‚üß

abbrev Ctx?.den (Œì : Ctx? Œ± Œµ) : C := t‚ü¶Œì.ety‚üß

notation "g‚ü¶" Œì "‚üß" => Ctx?.den Œì

end TyModel

section VarModel

variable {œÜ : Type _} {Œ± : Type _} {Œµ : Type _} [Signature œÜ Œ± Œµ]
         {C : Type _} [Category C] [MonoidalCategoryStruct C] [ChosenFiniteCoproducts C]
         [VarModel Œ± C]


abbrev Var?.del.den {v : Var? Œ± Œµ} (h : v.del) : (v‚ü¶ v ‚üß : C) ‚ü∂ ùüô_ C
  := !_ v.ety

abbrev Var?.copy.den {v : Var? Œ± Œµ} (h : v.copy) : (v‚ü¶ v ‚üß : C) ‚ü∂ v‚ü¶ v ‚üß ‚äó v‚ü¶ v ‚üß
  := Œî_ v.ety

def Var?.Wk.den {v w : Var? Œ± Œµ} (h : v ‚â§ w) : (v‚ü¶ v ‚üß : C) ‚ü∂ v‚ü¶ w ‚üß
  := match v, w, h with
  | v, ‚ü®B, 0, _‚ü©, h => (h.unused_del rfl).den
  | ‚ü®A, (_ : Quant), _‚ü©, ‚ü®B, (_ : Quant), _‚ü©, h => eq_hom (by cases h.ty; rfl)

@[simp]
theorem Var?.Wk.den_zero {v : Var? Œ± Œµ} {A : Ty Œ±} {e : Œµ} (h : v ‚â§ ‚ü®A, 0, e‚ü©)
  : Var?.Wk.den (C := C) h = (h.unused_del rfl).den
  := by cases v with | mk _ q _ => cases q <;> rfl

@[simp]
theorem Var?.Wk.den_quant {v : Var? Œ± Œµ} {A : Ty Œ±} {q : Quant} {e : Œµ} (h : v ‚â§ ‚ü®A, q, e‚ü©)
  : Var?.Wk.den (C := C) h = eq_hom (by rw [ety_eq_quant h])
  := by cases v with | mk _ q' _ =>
        cases q' with | zero => have h := h.q; cases h using EQuant.le.casesLE | _ => rfl

def Ctx?.PWk.den {Œì Œî : Ctx? Œ± Œµ} (h : Œì.PWk Œî) : (g‚ü¶ Œì ‚üß : C) ‚ü∂ g‚ü¶ Œî ‚üß
  := match Œì, Œî, h with
  | .nil, .nil, _ => ùüô (ùüô_ C)
  | .cons _ _, .cons _ _, h => h.tail.den ‚äó (Var?.Wk.den h.head)

@[simp]
def Ctx?.Wk.den {Œì Œî : Ctx? Œ± Œµ} : Œì.Wk Œî ‚Üí ((g‚ü¶ Œì ‚üß : C) ‚ü∂ g‚ü¶ Œî ‚üß)
  | .nil => ùüô (ùüô_ C)
  | .cons hŒì hv => hŒì.den ‚äó (Var?.Wk.den hv)
  | .skip hŒì hv => (hŒì.den ‚äó hv.den) ‚â´ (œÅ_ _).hom

def Var.Ix.den {Œì : Ctx? Œ± Œµ} {v : Var? Œ± Œµ} (h : v.Ix Œì) : (g‚ü¶ Œì ‚üß : C) ‚ü∂ v‚ü¶ v ‚üß
  := Ctx?.Wk.den h ‚â´ (Œª_ _).hom

def Ctx?.At.den {v : Var? Œ± Œµ} {Œì : Ctx? Œ± Œµ} {n} (h : Œì.At v n) : (g‚ü¶ Œì ‚üß : C) ‚ü∂ v‚ü¶ v ‚üß :=
  h.inductionOn
    (Œª _ d _ h => (d.den ‚äó (Var?.Wk.den h)) ‚â´ (Œª_ _).hom)
    (Œª _ _ _ _ hw p => (p ‚äó hw.den) ‚â´ (œÅ_ _).hom)

@[simp]
theorem Ctx?.At.den_zero {v w : Var? Œ± Œµ} {Œì : Ctx? Œ± Œµ} (h : (Œì.cons w).At v 0)
  : h.den (C := C)
  = (h.zero_cons_tail.den (C := C) ‚äó (Var?.Wk.den h.zero_cons_head)) ‚â´ (Œª_ _).hom
  := rfl

@[simp]
theorem Ctx?.At.den_succ {v w : Var? Œ± Œµ} {Œì : Ctx? Œ± Œµ} (h : (Œì.cons w).At v (n + 1))
  : h.den (C := C)
  = (h.succ_cons_tail.den (C := C) ‚äó h.succ_cons_head.den) ‚â´ (œÅ_ _).hom
  := rfl

def Var?.PSSplit.den {u v w : Var? Œ± Œµ} : u.PSSplit v w ‚Üí ((v‚ü¶ u ‚üß : C) ‚ü∂ v‚ü¶ v ‚üß ‚äó v‚ü¶ w ‚üß)
  | .left _ _ _ => (œÅ_ _).inv
  | .right _ _ _ => (Œª_ _).inv
  | .sboth h => have _ := h.copy; Œî_ _

theorem Var?.Wk.den_eff_in {v : Var? Œ± Œµ} {A : Ty Œ±} {q} {e e' : Œµ}
  (h : v ‚â§ ‚ü®A, q, e‚ü©) (h' : v ‚â§ ‚ü®A, q, e'‚ü©)
  : Var?.Wk.den (C := C) h = Var?.Wk.den h'
  := by cases q using EQuant.casesZero <;> simp

theorem Ctx?.At.den_eff {A : Ty Œ±} {q} {e e' : Œµ} {Œì : Ctx? Œ± Œµ} {n}
  (hŒìe : Œì.At ‚ü®A, q, e‚ü© n) (hŒìe' : Œì.At ‚ü®A, q, e'‚ü© n)
  : hŒìe.den (C := C) = hŒìe'.den
  := by induction hŒìe with
  | here =>
    cases hŒìe'; simp only [den_zero, Iso.cancel_iso_hom_right]
    congr 1; apply Var?.Wk.den_eff_in
  | there _ _ _ _ _ I => cases hŒìe'; simp [*]

variable [BraidedCategoryStruct C]

def Ctx?.PSSplit.den {Œì Œî Œû : Ctx? Œ± Œµ} : Œì.PSSplit Œî Œû ‚Üí ((g‚ü¶ Œì ‚üß : C) ‚ü∂ g‚ü¶ Œî ‚üß ‚äó g‚ü¶ Œû ‚üß)
  | .nil => (Œª_ _).inv
  | .cons hŒì hv => (hŒì.den ‚äó hv.den) ‚â´ swap_inner _ _ _ _

end VarModel

variable {œÜ : Type _} {Œ± : Type _} {Œµ : Type _} [Signature œÜ Œ± Œµ]
         {C : Type _} [Category C] [MonoidalCategoryStruct C] [ChosenFiniteCoproducts C]
         [BraidedCategoryStruct C] [Iterate C] [E : Elgot2 C Œµ]
         [M : Model œÜ Œ± Œµ C]

@[simp]
theorem Var?.Wk.den_eff {A : Ty Œ±} {q : EQuant} {e e' : Œµ} (h : ‚ü®A, q, e‚ü© ‚â§ ‚ü®A, q, e'‚ü©)
  : Var?.Wk.den (C := C) h = ùüô _
  := by cases q using EQuant.casesZero with
    | zero => simp [Var?.del.den, ety]
    | rest q => rfl

@[simp]
theorem Var?.del.den_pure {v : Var? Œ± Œµ} (h : v.del) : E.HasEff e h.den := inferInstance

@[simp]
theorem Var?.copy.den_pure {v : Var? Œ± Œµ} (h : v.copy) : E.HasEff e h.den := inferInstance

@[simp]
instance Var?.Wk.den_pure {e : Œµ} {v w : Var? Œ± Œµ} (h : v ‚â§ w)
  : E.HasEff e <| Var?.Wk.den h
  := by cases v with | mk _ qv _ => cases w with | mk _ qw _ => cases qw using EQuant.casesZero with
    | zero => rw [den_zero]; infer_instance
    | rest qw => rw [den_quant]; infer_instance

instance Var?.Wk.den_central {v w : Var? Œ± Œµ} (h : v ‚â§ w)
  : Central (C := C) (Var?.Wk.den h)
  := (den_pure h).pure_central

@[simp]
theorem Var?.Wk.den_comp {u v w : Var? Œ± Œµ} (h : u ‚â§ v) (h' : v ‚â§ w)
  : den h ‚â´ den h' = den (C := C) (le_trans h h')
  := by cases u with | mk _ qu _ => cases v with | mk _ qv _ => cases w with | mk _ qw _ =>
    cases qw using EQuant.casesZero with
    | zero =>
      simp [Var?.del.den]
      exact M.drop_aff (‚ä• : Œµ) _ (hA := ety_aff_zero (le_trans h h')) (hB := ety_aff_zero h')
    | rest qw =>  cases qv using EQuant.casesZero with
    | zero => cases h'.q using EQuant.le.casesLE
    | rest qv => simp

@[simp]
theorem Var?.Wk.den_comp_drop {v w : Var? Œ± Œµ} (h : v ‚â§ w) [hw : w.del]
  : Var?.Wk.den h ‚â´ !_ w.ety = (hw.anti h).den (C := C)
  := by rw [M.drop_aff ‚ä• _ (hA := (hw.anti h).ety_aff)]

variable [IsPremonoidal C]

instance Ctx?.Wk.den_pure {Œì Œî : Ctx? Œ± Œµ} (h : Œì.Wk Œî) : E.HasEff e h.den := by induction h with
  | nil => simp only [den]; exact HasEff.id
  | skip =>
    simp only [den]; apply HasEff.comp (hf := _) (hg := _); apply HasEff.tensorHom; infer_instance
  | cons => simp only [den]; infer_instance

instance Ctx?.Wk.den_central {Œì Œî : Ctx? Œ± Œµ} (h : Œì.Wk Œî) : Central (C := C) h.den
  := (den_pure h).pure_central

@[reassoc]
theorem Ctx?.Wk.den_comp {Œì Œî Œû : Ctx? Œ± Œµ} (h : Œì.Wk Œî) (h' : Œî.Wk Œû)
  : h.den ‚â´ h'.den = (h.comp h').den (C := C)
  := by induction h generalizing Œû with
  -- TODO: why is this not simping?
  | nil => cases h'; simp [den, Wk.comp]; apply Category.id_comp
  | skip _ _ I => simp [
      den, Wk.comp, <-Monoidal.rightUnitor_naturality, <-Monoidal.whiskerRight_comp_assoc, I,
      Monoidal.tensor_eq_rtimes_left, rtimes]
  | cons _ hv I => cases h' with
  | skip _ hw => simp [den, Wk.comp, <-Monoidal.tensor_comp_left_assoc, I]
  | cons => simp [den, Wk.comp, <-Monoidal.tensor_comp_left, I]

instance Ctx?.At.den_pure {v : Var? Œ± Œµ} {Œì : Ctx? Œ± Œµ} {n} (h : Œì.At v n)
  : E.HasEff e h.den
  := by induction h <;> simp <;> infer_instance

instance Ctx?.At.den_central {v : Var? Œ± Œµ} {Œì : Ctx? Œ± Œµ} {n} (h : Œì.At v n)
  : Central (C := C) h.den
  := (den_pure h).pure_central

@[simp]
theorem Ctx?.At.den_wkOut {v w : Var? Œ± Œµ} {Œì : Ctx? Œ± Œµ} {n} (hŒìv : Œì.At v n) (hvw : v ‚â§ w)
  : hŒìv.den (C := C) ‚â´ Var?.Wk.den hvw = (hŒìv.wkOut hvw).den
  := by induction hŒìv with
  | here =>
    simp only [Ctx?.den, ety, Ty.den, den_zero, Monoidal.tensorHom_def, Category.assoc, ‚Üê
      Monoidal.leftUnitor_naturality]
    rw [<-Monoidal.whiskerLeft_comp_assoc, Var?.Wk.den_comp]
    rfl
  | there _ _ _ _ _ I =>
    simp only [den_succ, Category.assoc, ‚Üê Monoidal.rightUnitor_naturality]
    rw [Monoidal.tensor_eq_rtimes_left, Monoidal.tensor_eq_rtimes_left]
    simp only [rtimes, Category.assoc]
    rw [<-Monoidal.whiskerRight_comp_assoc, I]

@[simp]
theorem Ctx?.At.den_wkIn {Œì Œî : Ctx? Œ± Œµ} (w : Œì.Wk Œî) {v n} (hŒîv : Œî.At v n)
  : w.den (C := C) ‚â´ hŒîv.den = (hŒîv.wkIn w).den := by induction w generalizing n with
  | nil => cases hŒîv
  | skip => simp [
    <-Monoidal.rightUnitor_naturality, <-Monoidal.tensorHom_id,
    <-Monoidal.tensor_comp_left_assoc, *]
  | cons => cases hŒîv with
  | here =>
    simp [<-Monoidal.tensor_comp_left_assoc, Wk.den_comp]
    congr
    apply wk_nil_unique
  | there => simp [<-Monoidal.tensor_comp_left_assoc, Wk.den_comp, *]

-- TODO: Ctx?.At.ix.den = Ctx?.At.den

-- TODO: Var?.Ix.at.den = Var?.Ix.den

-- TODO: PWk composition

-- TODO: den(PWk.toWk) = den(PWk)

-- TODO: PSSplit ; swap

-- TODO: PSSplit ==> PSSplit, PSSplit vs PSSplit?

-- TODO: Split? SSplit?
